//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Keywords.API.Swagger.Controllers.Generated
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class KeywordControllerBase : Microsoft.AspNetCore.Mvc.Controller
    {
        /// <summary>
        /// Get paginated keywords for a video
        /// </summary>
        /// <remarks>
        /// Get paginated keywords for a video
        /// </remarks>
        /// <param name="paginatedKeywordsRequest">Contains pagination details</param>
        /// <returns>Returns all keywords paginated</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("keywords/")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<PaginatedKeywordsResponse>> GetAllKeywordsByVideoId([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] PaginatedKeywordsRequest paginatedKeywordsRequest);

        /// <summary>
        /// Get a keyword by its id
        /// </summary>
        /// <remarks>
        /// Get a keyword by its id
        /// </remarks>
        /// <param name="keywordId">Keyword Id to get the keyword entity for</param>
        /// <returns>Keyword found</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("keyword/keywordId/{keywordId}")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Keyword>> GetKeyword([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid keywordId);

        /// <summary>
        /// Publish a keyword using its id
        /// </summary>
        /// <remarks>
        /// Publish keyboard using its id
        /// </remarks>
        /// <param name="keywordId">Keyword Id</param>
        /// <param name="toBePublished">Bool to state whether will be published or not</param>
        /// <returns>Keyword published</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("keyword/keywordId/{keywordId}")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Keyword>> PublishKeyword([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid keywordId, [Microsoft.AspNetCore.Mvc.FromQuery] bool? toBePublished);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class IndexerControllerBase : Microsoft.AspNetCore.Mvc.Controller
    {
        /// <summary>
        /// Get a keyword list of the indexed video
        /// </summary>
        /// <remarks>
        /// Get a keyword list of the indexed video
        /// </remarks>
        /// <param name="videoId">Video Id to get the video ocr for</param>
        /// <returns>Ocr video found</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("indexer/{videoId}")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IndexerResponse>> GetIndexerResponse([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid videoId);

        /// <summary>
        /// Index a video
        /// </summary>
        /// <remarks>
        /// Index a video
        /// </remarks>
        /// <param name="videoId">Video id to index</param>
        /// <param name="url">Video url to index</param>
        /// <returns>Video index started</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("indexer/{videoId}")]
        public abstract System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> IndexVideo([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Guid videoId, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string url);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Keyword
    {
        /// <summary>
        /// Id of the keyword
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Keyword's content can be a word or a phrase
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Id of the video that the keyword belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VideoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? VideoId { get; set; }

        /// <summary>
        /// States if the Keyword is available for users
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// The language the keyword belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>
        /// Link to the keyword's audio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AudioLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AudioLink { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Keyword FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Keyword>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedKeywordsRequest
    {
        /// <summary>
        /// Video Id to get the keywords for
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VideoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? VideoId { get; set; }

        /// <summary>
        /// Size of the page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        /// <summary>
        /// Page number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Page", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Page { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PaginatedKeywordsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaginatedKeywordsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedKeywordsResponse
    {
        /// <summary>
        /// List of videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Keyword> Keywords { get; set; }

        /// <summary>
        /// Size of the page that was requested
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SizeRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SizeRequested { get; set; }

        /// <summary>
        /// Total number of keywords retrieved
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalAmount { get; set; }

        /// <summary>
        /// Current page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentPage { get; set; }

        /// <summary>
        /// Total number of pages based on the specified size
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalAmountOfPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalAmountOfPages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PaginatedKeywordsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaginatedKeywordsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndexerResponse
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IndexerResponseState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("processingProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingProgress { get; set; }

        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Keyword> Keywords { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IndexerResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexerResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IndexerResponseState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Indexing")]
        Indexing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtractingKeyPhrases")]
        ExtractingKeyPhrases = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 3,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604